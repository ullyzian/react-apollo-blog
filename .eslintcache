[{"/Users/viktor/PycharmProjects/react-blog-client/src/index.tsx":"1","/Users/viktor/PycharmProjects/react-blog-client/src/reportWebVitals.ts":"2","/Users/viktor/PycharmProjects/react-blog-client/src/apollo/client.ts":"3","/Users/viktor/PycharmProjects/react-blog-client/src/App.tsx":"4","/Users/viktor/PycharmProjects/react-blog-client/src/contexts/AuthContext.ts":"5","/Users/viktor/PycharmProjects/react-blog-client/src/hooks/useAuth.ts":"6","/Users/viktor/PycharmProjects/react-blog-client/src/routes.tsx":"7","/Users/viktor/PycharmProjects/react-blog-client/src/apollo/mutations.ts":"8","/Users/viktor/PycharmProjects/react-blog-client/src/utils/constants.ts":"9","/Users/viktor/PycharmProjects/react-blog-client/src/pages/BlogList.tsx":"10","/Users/viktor/PycharmProjects/react-blog-client/src/pages/SignIn.tsx":"11","/Users/viktor/PycharmProjects/react-blog-client/src/pages/SignUp.tsx":"12","/Users/viktor/PycharmProjects/react-blog-client/src/pages/BlogPost.tsx":"13","/Users/viktor/PycharmProjects/react-blog-client/src/apollo/queries.ts":"14","/Users/viktor/PycharmProjects/react-blog-client/src/components/Navigation/Navigation.tsx":"15","/Users/viktor/PycharmProjects/react-blog-client/src/components/Auth/SignInForm.tsx":"16","/Users/viktor/PycharmProjects/react-blog-client/src/components/Auth/SignUpForm.tsx":"17","/Users/viktor/PycharmProjects/react-blog-client/src/components/PostList/PostsList.tsx":"18","/Users/viktor/PycharmProjects/react-blog-client/src/components/PostList/PostCard.tsx":"19","/Users/viktor/PycharmProjects/react-blog-client/src/components/Post/NotFound.tsx":"20","/Users/viktor/PycharmProjects/react-blog-client/src/components/Post/PostEditForm.tsx":"21","/Users/viktor/PycharmProjects/react-blog-client/src/components/Post/Post.tsx":"22","/Users/viktor/PycharmProjects/react-blog-client/src/components/Post/CreatePostModal.tsx":"23","/Users/viktor/PycharmProjects/react-blog-client/src/components/Comments/CommentsList.tsx":"24","/Users/viktor/PycharmProjects/react-blog-client/src/components/Comments/Comment.tsx":"25","/Users/viktor/PycharmProjects/react-blog-client/src/components/PostList/Sidebar.tsx":"26","/Users/viktor/PycharmProjects/react-blog-client/src/components/Post/Sidebar.tsx":"27","/Users/viktor/PycharmProjects/react-blog-client/src/components/Comments/CommentForm.tsx":"28","/Users/viktor/PycharmProjects/react-blog-client/src/pages/Home.tsx":"29"},{"size":669,"mtime":1611505345456,"results":"30","hashOfConfig":"31"},{"size":545,"mtime":1611240737920,"results":"32","hashOfConfig":"31"},{"size":726,"mtime":1611507892754,"results":"33","hashOfConfig":"31"},{"size":432,"mtime":1611436759056,"results":"34","hashOfConfig":"31"},{"size":297,"mtime":1611436364874,"results":"35","hashOfConfig":"31"},{"size":1466,"mtime":1611436354224,"results":"36","hashOfConfig":"31"},{"size":912,"mtime":1611505118756,"results":"37","hashOfConfig":"31"},{"size":2304,"mtime":1611504387829,"results":"38","hashOfConfig":"31"},{"size":138,"mtime":1611419980184,"results":"39","hashOfConfig":"31"},{"size":1083,"mtime":1611503276740,"results":"40","hashOfConfig":"31"},{"size":647,"mtime":1611436514830,"results":"41","hashOfConfig":"31"},{"size":647,"mtime":1611436537011,"results":"42","hashOfConfig":"31"},{"size":3005,"mtime":1611504515447,"results":"43","hashOfConfig":"31"},{"size":521,"mtime":1611502635062,"results":"44","hashOfConfig":"31"},{"size":1747,"mtime":1611492570502,"results":"45","hashOfConfig":"31"},{"size":2495,"mtime":1611435200829,"results":"46","hashOfConfig":"31"},{"size":3438,"mtime":1611435815665,"results":"47","hashOfConfig":"31"},{"size":922,"mtime":1611504824480,"results":"48","hashOfConfig":"31"},{"size":1906,"mtime":1611501663674,"results":"49","hashOfConfig":"31"},{"size":372,"mtime":1611499340115,"results":"50","hashOfConfig":"31"},{"size":1836,"mtime":1611501564123,"results":"51","hashOfConfig":"31"},{"size":297,"mtime":1611501100811,"results":"52","hashOfConfig":"31"},{"size":2309,"mtime":1611498262558,"results":"53","hashOfConfig":"31"},{"size":711,"mtime":1611504690116,"results":"54","hashOfConfig":"31"},{"size":637,"mtime":1611504747166,"results":"55","hashOfConfig":"31"},{"size":1183,"mtime":1611503322578,"results":"56","hashOfConfig":"31"},{"size":1607,"mtime":1611503750839,"results":"57","hashOfConfig":"31"},{"size":1268,"mtime":1611504429763,"results":"58","hashOfConfig":"31"},{"size":1412,"mtime":1611507228768,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"1d90eub",{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"62"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"62"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"62"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"62"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"62"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"62"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"/Users/viktor/PycharmProjects/react-blog-client/src/index.tsx",[],[],"/Users/viktor/PycharmProjects/react-blog-client/src/reportWebVitals.ts",[],"/Users/viktor/PycharmProjects/react-blog-client/src/apollo/client.ts",[],"/Users/viktor/PycharmProjects/react-blog-client/src/App.tsx",[],"/Users/viktor/PycharmProjects/react-blog-client/src/contexts/AuthContext.ts",[],"/Users/viktor/PycharmProjects/react-blog-client/src/hooks/useAuth.ts",[],"/Users/viktor/PycharmProjects/react-blog-client/src/routes.tsx",[],"/Users/viktor/PycharmProjects/react-blog-client/src/apollo/mutations.ts",[],"/Users/viktor/PycharmProjects/react-blog-client/src/utils/constants.ts",[],"/Users/viktor/PycharmProjects/react-blog-client/src/pages/BlogList.tsx",[],"/Users/viktor/PycharmProjects/react-blog-client/src/pages/SignIn.tsx",[],"/Users/viktor/PycharmProjects/react-blog-client/src/pages/SignUp.tsx",[],"/Users/viktor/PycharmProjects/react-blog-client/src/pages/BlogPost.tsx",[],"/Users/viktor/PycharmProjects/react-blog-client/src/apollo/queries.ts",[],"/Users/viktor/PycharmProjects/react-blog-client/src/components/Navigation/Navigation.tsx",[],"/Users/viktor/PycharmProjects/react-blog-client/src/components/Auth/SignInForm.tsx",[],"/Users/viktor/PycharmProjects/react-blog-client/src/components/Auth/SignUpForm.tsx",[],"/Users/viktor/PycharmProjects/react-blog-client/src/components/PostList/PostsList.tsx",["127","128","129"],"import React from 'react';\nimport { ApolloError, ApolloQueryResult } from '@apollo/client';\nimport PostCard from './PostCard';\n\nexport interface IPost {\n    id: number;\n    title: string;\n    body: string;\n    authorId: number;\n    refetch: () => Promise<ApolloQueryResult<any>>;\n}\n\nexport interface PostsListProps {\n    data: any;\n    refetch: () => Promise<ApolloQueryResult<any>>;\n    loading: boolean;\n    error: ApolloError | undefined;\n}\n\nconst PostsList: React.FC<PostsListProps> = ({ data, loading, error, refetch }) => {\n    if (loading) {\n        return <div>Loading</div>;\n    }\n    if (error) {\n        return <div>Error</div>;\n    }\n    return data.listPosts\n        .slice(0)\n        .reverse()\n        .map(({ body, title, id, authorId }: IPost) => {\n            return <PostCard key={id} body={body} title={title} id={id} authorId={authorId} refetch={refetch} />;\n        });\n};\n\nexport default PostsList;\n","/Users/viktor/PycharmProjects/react-blog-client/src/components/PostList/PostCard.tsx",[],"/Users/viktor/PycharmProjects/react-blog-client/src/components/Post/NotFound.tsx",[],"/Users/viktor/PycharmProjects/react-blog-client/src/components/Post/PostEditForm.tsx",["130"],"import * as React from 'react';\nimport { Dispatch, SetStateAction, useState } from 'react';\nimport { Button, Form } from 'react-bootstrap';\nimport { ApolloQueryResult, useMutation } from '@apollo/client';\nimport { UPDATE_POST } from '../../apollo/mutations';\n\ninterface Props {\n    id: number;\n    refetch: () => Promise<ApolloQueryResult<any>>;\n    setEditMode: Dispatch<SetStateAction<boolean>>;\n    oldTitle: string;\n    oldBody: string;\n}\n\nexport const PostEditForm: React.FC<Props> = ({ id, refetch, setEditMode, oldBody, oldTitle }) => {\n    const [title, setTitle] = useState(oldTitle);\n    const [body, setBody] = useState(oldBody);\n    const [updatePost] = useMutation(UPDATE_POST);\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        updatePost({ variables: { id: id, title: title, body: body } })\n            .then(() => {\n                setEditMode(false);\n                refetch();\n            })\n            .catch((e) => {\n                console.log(e);\n            });\n    };\n    return (\n        <Form onSubmit={handleSubmit}>\n            <Form.Group controlId=\"exampleForm.ControlInputTitle\">\n                <Form.Label>Title</Form.Label>\n                <Form.Control\n                    value={title}\n                    type=\"text\"\n                    placeholder=\"Title\"\n                    onChange={(e) => setTitle(e.target.value)}\n                />\n            </Form.Group>\n            <Form.Group controlId=\"exampleForm.ControlTextarea\">\n                <Form.Label>Body</Form.Label>\n                <Form.Control value={body} as=\"textarea\" rows={3} onChange={(e) => setBody(e.target.value)} />\n            </Form.Group>\n            <Button variant=\"primary\" type=\"submit\">\n                Save changes\n            </Button>\n        </Form>\n    );\n};\n","/Users/viktor/PycharmProjects/react-blog-client/src/components/Post/Post.tsx",[],"/Users/viktor/PycharmProjects/react-blog-client/src/components/Post/CreatePostModal.tsx",["131"],"import React, { useState } from 'react';\nimport { Button, Form, Modal } from 'react-bootstrap';\nimport { ApolloQueryResult, useMutation } from '@apollo/client';\nimport { CREATE_POST } from '../../apollo/mutations';\n\ninterface CreatePostModalProps {\n    show: boolean;\n    handleClose: () => void;\n    refetch: () => Promise<ApolloQueryResult<any>>;\n}\n\nconst CreatePostModal: React.FC<CreatePostModalProps> = ({ show, handleClose, refetch }) => {\n    const [title, setTitle] = useState('');\n    const [body, setBody] = useState('');\n    const [createPost] = useMutation(CREATE_POST);\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        createPost({ variables: { title: title, body: body } })\n            .then(() => {\n                refetch();\n                handleClose();\n            })\n            .catch((e) => {\n                console.log(e);\n            });\n    };\n\n    return (\n        <>\n            <Modal show={show} onHide={handleClose}>\n                <Form onSubmit={handleSubmit}>\n                    <Modal.Header closeButton>\n                        <Modal.Title>Create new post</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body>\n                        <Form.Group controlId=\"exampleForm.ControlInputTitle\">\n                            <Form.Label>Title</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Title\" onChange={(e) => setTitle(e.target.value)} />\n                        </Form.Group>\n                        <Form.Group controlId=\"exampleForm.ControlTextarea\">\n                            <Form.Label>Body</Form.Label>\n                            <Form.Control as=\"textarea\" rows={3} onChange={(e) => setBody(e.target.value)} />\n                        </Form.Group>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <Button variant=\"secondary\" type=\"submit\" onClick={handleClose}>\n                            Close\n                        </Button>\n                        <Button variant=\"primary\" type=\"submit\">\n                            Create\n                        </Button>\n                    </Modal.Footer>\n                </Form>\n            </Modal>\n        </>\n    );\n};\n\nexport default CreatePostModal;\n","/Users/viktor/PycharmProjects/react-blog-client/src/components/Comments/CommentsList.tsx",["132","133"],"import * as React from 'react';\nimport { ApolloError, ApolloQueryResult } from '@apollo/client';\nimport { Comment, IComment } from './Comment';\n\nexport interface CommentsListProps {\n    data: any;\n    refetch: () => Promise<ApolloQueryResult<any>>;\n    loading: boolean;\n    error: ApolloError | undefined;\n}\n\nexport const CommentsList: React.FC<CommentsListProps> = ({ loading, error, data }) => {\n    if (loading) {\n        return <div>Loading</div>;\n    }\n    if (error) {\n        return <div>Error</div>;\n    }\n    return data\n        .slice(0)\n        .reverse()\n        .map(({ body, id, author }: IComment) => {\n            return <Comment key={id} body={body} id={id} author={author} />;\n        });\n};\n","/Users/viktor/PycharmProjects/react-blog-client/src/components/Comments/Comment.tsx",["134","135"],"import * as React from 'react';\nimport { Card, Button } from 'react-bootstrap';\nimport { ApolloQueryResult } from '@apollo/client';\n\ninterface Author {\n    fullname: string;\n}\n\nexport interface IComment {\n    id?: number;\n    body: string;\n    author: Author;\n}\n\nexport const Comment: React.FC<IComment> = ({ body, author }) => {\n    return (\n        <Card className=\"my-3\">\n            <Card.Header as=\"h6\">\n                {author.fullname} <span className=\"text-muted\">commented</span>\n            </Card.Header>\n            <Card.Body>\n                <Card.Text>{body}</Card.Text>\n            </Card.Body>\n        </Card>\n    );\n};\n","/Users/viktor/PycharmProjects/react-blog-client/src/components/PostList/Sidebar.tsx",["136"],"import React, { useContext, useState } from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport CreatePostModal from '../Post/CreatePostModal';\nimport AuthContext from '../../contexts/AuthContext';\nimport { useHistory } from 'react-router-dom';\nimport { ROUTES } from '../../utils/constants';\nimport { ApolloQueryResult } from '@apollo/client';\n\ninterface Props {\n    refetch: () => Promise<ApolloQueryResult<any>>;\n}\n\nconst Sidebar: React.FC<Props> = ({ refetch }) => {\n    const [show, setShow] = useState(false);\n    const auth = useContext(AuthContext);\n    const history = useHistory();\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => {\n        auth.authenticate()?.then((is_auth) => {\n            if (is_auth) {\n                setShow(!show);\n            } else {\n                history.push(ROUTES.signIn);\n            }\n        });\n    };\n\n    return (\n        <ListGroup>\n            <ListGroup.Item onClick={handleShow} action>\n                Create new post\n            </ListGroup.Item>\n            <CreatePostModal show={show} handleClose={handleClose} refetch={refetch} />\n        </ListGroup>\n    );\n};\n\nexport default Sidebar;\n","/Users/viktor/PycharmProjects/react-blog-client/src/components/Post/Sidebar.tsx",["137"],"import React, { Dispatch, SetStateAction, useContext, useState } from 'react';\nimport { ListGroup } from 'react-bootstrap';\nimport CreatePostModal from '../Post/CreatePostModal';\nimport AuthContext from '../../contexts/AuthContext';\nimport { useHistory } from 'react-router-dom';\nimport { ROUTES } from '../../utils/constants';\nimport { ApolloQueryResult } from '@apollo/client';\n\ninterface Props {\n    refetch: () => Promise<ApolloQueryResult<any>>;\n    editMode: boolean;\n    setEditMode: Dispatch<SetStateAction<boolean>>;\n    authorId: number;\n}\n\nconst Sidebar: React.FC<Props> = ({ refetch, editMode, setEditMode, authorId }) => {\n    const [show, setShow] = useState(false);\n    const auth = useContext(AuthContext);\n    const history = useHistory();\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => {\n        auth.authenticate()?.then((is_auth) => {\n            if (is_auth) {\n                setShow(!show);\n            } else {\n                history.push(ROUTES.signIn);\n            }\n        });\n    };\n\n    return (\n        <ListGroup>\n            <ListGroup.Item onClick={handleShow} action>\n                Create new post\n            </ListGroup.Item>\n            <CreatePostModal show={show} handleClose={handleClose} refetch={refetch} />\n            {Number(auth.user?.id) === authorId ? (\n                <>\n                    <ListGroup.Item onClick={() => setEditMode(!editMode)} action>\n                        Edit post\n                    </ListGroup.Item>\n                </>\n            ) : null}\n        </ListGroup>\n    );\n};\n\nexport default Sidebar;\n","/Users/viktor/PycharmProjects/react-blog-client/src/components/Comments/CommentForm.tsx",["138","139"],"// @flow\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { Button, Form, Modal } from 'react-bootstrap';\nimport { ApolloQueryResult, useMutation } from '@apollo/client';\nimport { CREATE_COMMENT } from '../../apollo/mutations';\n\ninterface Props {\n    postId: number;\n    refetch: () => Promise<ApolloQueryResult<any>>;\n}\n\nexport const CommentForm: React.FC<Props> = ({ postId, refetch }) => {\n    const [body, setBody] = useState('');\n    const [createComment] = useMutation(CREATE_COMMENT);\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        createComment({ variables: { postId: postId, body: body } })\n            .then(() => {\n                refetch();\n            })\n            .catch((e) => console.log(e));\n    };\n\n    return (\n        <Form onSubmit={handleSubmit} className=\"my-2\">\n            <Form.Group controlId=\"exampleForm.ControlTextarea\">\n                <Form.Label>Write comment</Form.Label>\n                <Form.Control as=\"textarea\" rows={3} onChange={(e) => setBody(e.target.value)} />\n                <Button variant=\"primary\" type=\"submit\" className=\"my-2\">\n                    Comment\n                </Button>\n            </Form.Group>\n        </Form>\n    );\n};\n","/Users/viktor/PycharmProjects/react-blog-client/src/pages/Home.tsx",[],{"ruleId":"140","severity":1,"message":"141","line":10,"column":46,"nodeType":"142","messageId":"143","endLine":10,"endColumn":49,"suggestions":"144"},{"ruleId":"140","severity":1,"message":"141","line":14,"column":11,"nodeType":"142","messageId":"143","endLine":14,"endColumn":14,"suggestions":"145"},{"ruleId":"140","severity":1,"message":"141","line":15,"column":46,"nodeType":"142","messageId":"143","endLine":15,"endColumn":49,"suggestions":"146"},{"ruleId":"140","severity":1,"message":"141","line":9,"column":46,"nodeType":"142","messageId":"143","endLine":9,"endColumn":49,"suggestions":"147"},{"ruleId":"140","severity":1,"message":"141","line":9,"column":46,"nodeType":"142","messageId":"143","endLine":9,"endColumn":49,"suggestions":"148"},{"ruleId":"140","severity":1,"message":"141","line":6,"column":11,"nodeType":"142","messageId":"143","endLine":6,"endColumn":14,"suggestions":"149"},{"ruleId":"140","severity":1,"message":"141","line":7,"column":46,"nodeType":"142","messageId":"143","endLine":7,"endColumn":49,"suggestions":"150"},{"ruleId":"151","severity":1,"message":"152","line":2,"column":16,"nodeType":"153","messageId":"154","endLine":2,"endColumn":22},{"ruleId":"151","severity":1,"message":"155","line":3,"column":10,"nodeType":"153","messageId":"154","endLine":3,"endColumn":27},{"ruleId":"140","severity":1,"message":"141","line":10,"column":46,"nodeType":"142","messageId":"143","endLine":10,"endColumn":49,"suggestions":"156"},{"ruleId":"140","severity":1,"message":"141","line":10,"column":46,"nodeType":"142","messageId":"143","endLine":10,"endColumn":49,"suggestions":"157"},{"ruleId":"151","severity":1,"message":"158","line":4,"column":24,"nodeType":"153","messageId":"154","endLine":4,"endColumn":29},{"ruleId":"140","severity":1,"message":"141","line":10,"column":46,"nodeType":"142","messageId":"143","endLine":10,"endColumn":49,"suggestions":"159"},"@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["160","161"],["162","163"],["164","165"],["166","167"],["168","169"],["170","171"],["172","173"],"@typescript-eslint/no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'ApolloQueryResult' is defined but never used.",["174","175"],["176","177"],"'Modal' is defined but never used.",["178","179"],{"messageId":"180","fix":"181","desc":"182"},{"messageId":"183","fix":"184","desc":"185"},{"messageId":"180","fix":"186","desc":"182"},{"messageId":"183","fix":"187","desc":"185"},{"messageId":"180","fix":"188","desc":"182"},{"messageId":"183","fix":"189","desc":"185"},{"messageId":"180","fix":"190","desc":"182"},{"messageId":"183","fix":"191","desc":"185"},{"messageId":"180","fix":"192","desc":"182"},{"messageId":"183","fix":"193","desc":"185"},{"messageId":"180","fix":"194","desc":"182"},{"messageId":"183","fix":"195","desc":"185"},{"messageId":"180","fix":"196","desc":"182"},{"messageId":"183","fix":"197","desc":"185"},{"messageId":"180","fix":"198","desc":"182"},{"messageId":"183","fix":"199","desc":"185"},{"messageId":"180","fix":"200","desc":"182"},{"messageId":"183","fix":"201","desc":"185"},{"messageId":"180","fix":"202","desc":"182"},{"messageId":"183","fix":"203","desc":"185"},"suggestUnknown",{"range":"204","text":"205"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"204","text":"206"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"207","text":"205"},{"range":"207","text":"206"},{"range":"208","text":"205"},{"range":"208","text":"206"},{"range":"209","text":"205"},{"range":"209","text":"206"},{"range":"210","text":"205"},{"range":"210","text":"206"},{"range":"211","text":"205"},{"range":"211","text":"206"},{"range":"212","text":"205"},{"range":"212","text":"206"},{"range":"213","text":"205"},{"range":"213","text":"206"},{"range":"214","text":"205"},{"range":"214","text":"206"},{"range":"215","text":"205"},{"range":"215","text":"206"},[273,276],"unknown","never",[327,330],[377,380],[339,342],[342,345],[192,195],[242,245],[418,421],[444,447],[336,339]]